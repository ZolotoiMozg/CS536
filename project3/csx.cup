/***
 *	Created by: Denzil Stefen Showers
 *  Student #9062589552 
 *
 *  This Is A Java CUP Specification For CSX, extended
 *  from a specification that handled only CSX Lite (csx.lite).
 *	Besides defining the grammar for CSX, it also constructs
 *  AST nodes to store all parts of a valid program.
 *
 ***/

/* Preliminaries to set up and use the scanner.  */

import java_cup.runtime.*;
parser code {:
 public void syntax_error(Symbol cur_token)
     {
 	  report_error("CSX syntax error at line "+
			String.valueOf(((CSXToken)cur_token.value).linenum),  
			null);
     }
:};
init with {:              :};
scan with {: return Scanner.next_token(); :};

/* Terminals (tokens returned by the scanner). */
terminal CSXIdentifierToken     IDENTIFIER; 
terminal CSXIntLitToken			INTLIT;
terminal CSXToken     			SEMI, LPAREN, RPAREN, ASG, LBRACE, RBRACE;
terminal CSXToken     			PLUS, MINUS, EQ, NOTEQ, rw_IF;
terminal CSXToken     			rw_INT, rw_BOOL;
terminal CSXToken				NOT, TIMES, COMMA, SLASH, COLON, LT, GT;
terminal CSXToken				LBRACKET, RBRACKET, CAND, INCREMENT, DECREMENT;
terminal CSXToken				LEQ, GEQ, COR, rw_CHAR, rw_ELSE, rw_READ;
terminal CSXToken				rw_TRUE, rw_VOID, rw_BREAK, rw_CLASS, rw_CONST;
terminal CSXToken				rw_FALSE, rw_PRINT, rw_WHILE, rw_RETURN;
terminal CSXToken				rw_CONTINUE;
terminal CSXStringLitToken		STRLIT;
terminal CSXCharLitToken		CHARLIT;

/* Non terminals */ 
non terminal classNode			prog; 
non terminal stmtsOption     	stmts;  
non terminal stmtNode	     	stmt;
non terminal exprNode			expr;
non terminal exprNode			unit; 
non terminal identNode	     	ident;
non terminal fieldDeclsOption	fielddecls; 
non terminal declNode			fielddecl;
non terminal typeNode			type;
non terminal Symbol		     	optionalSemi;
non terminal methodDeclsOption	methoddecls;
non terminal methodDeclNode		methoddecl;
non terminal argDeclsNode 		argdecls;
non terminal argDeclNode		argdecl;
non terminal memberDeclsNode	memberdecls;
non terminal readNode			readlist;
non terminal printNode			printlist;
non terminal argsNodeOption		args;
non terminal nameNode			name;
non terminal exprNode			term;
non terminal exprNode			factor;
non terminal exprNode			pri;
non terminal exprNode			unary;


start with prog;

prog		::= 
				rw_CLASS:c ident:i LBRACE memberdecls:ms RBRACE
				{: 	RESULT=
					new classNode(i, ms, c.linenum, c.colnum);
				:}
			|
				LBRACE:l fielddecls:f stmts:s RBRACE
			 	{: 	//RESULT=
					//new csxLiteNode(f, s, l.linenum, l.colnum); 
				:}
			;
			
memberdecls	::= fielddecl:f memberdecls:m
				{: RESULT=
					new memberDeclsNode(new fieldDeclsNode(f, 
						m.fields, f.linenum, f.colnum), m.methods,
                        f.linenum, f.colnum); :}  
			|
				methoddecls:mthds
				{: RESULT=
					new memberDeclsNode(fieldDeclsNode.NULL, mthds, 
						mthds.linenum, mthds.colnum); :}
			;

fielddecls	::=   fielddecl:f1 fielddecls:f2 
				 {: RESULT=
					new fieldDeclsNode(f1, f2, f1.linenum,f1.colnum); :}	
   			 |
				 {: RESULT=
					new nullFieldDeclsNode(); :}	
    		;
    		
fielddecl	::= type:t     ident:i      SEMI 
				 {: RESULT=
					new varDeclNode(i,t,exprNode.NULL, t.linenum,t.colnum); :}
			|
				type:t ident:i ASG expr:e SEMI
				{: RESULT=
					new varDeclNode(i,t,e,t.linenum,t.colnum);
				:}
			|
				type:t ident:i LBRACKET INTLIT:n RBRACKET SEMI
				{: RESULT=
					new arrayDeclNode(i,t,new intLitNode(n.intValue,n.linenum,n.colnum),t.linenum,t.colnum);
				:}
			|
				rw_CONST:cnst ident:i ASG expr:e SEMI
				{: RESULT=
					new constDeclNode(i,e,cnst.linenum,cnst.colnum);
				:}
			
    		;
    		
methoddecls	::=	methoddecl:m methoddecls:ms
				{: RESULT=
					new methodDeclsNode(m,ms,m.linenum,m.colnum); :}
			|
				{: RESULT=
					new nullMethodDeclsNode(); :}
			;


methoddecl	::=	rw_VOID:r ident:i LPAREN RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				{: RESULT=
					new methodDeclNode(i,argDeclsNode.NULL,typeNode.NULL,f,s,
						i.linenum,i.colnum); :}
			|	rw_VOID:r ident:i LPAREN argdecls:a RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				{: RESULT=
					new methodDeclNode(i,a,typeNode.NULL,f,s,i.linenum,
						i.colnum); :}

			|	type:t ident:i LPAREN RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				{: RESULT=
					new methodDeclNode(i,argDeclsNode.NULL,t,f,s,i.linenum, 
						i.colnum); :}
			|	type:t ident:i LPAREN argdecls:a RPAREN LBRACE fielddecls:f stmts:s RBRACE optionalSemi
				{: RESULT=
					new methodDeclNode(i,a,t,f,s,i.linenum,i.colnum); :}
			;

argdecls	::= argdecl:a COMMA argdecls:as
				{: RESULT=
					new argDeclsNode(a, as, a.linenum, a.colnum); :}
			|	argdecl:a
				{: RESULT=
					new argDeclsNode(a, argDeclsNode.NULL, a.linenum, a.colnum);	
				:}
				
			;

argdecl		::= type:t ident:i
				{: RESULT=
					new valArgDeclNode(i, t, i.linenum, i.colnum); :}
			|	type:t ident:i LBRACKET RBRACKET
				{: RESULT=
					new arrayArgDeclNode(i, t, i.linenum, i.colnum); :}
			;
    		
type
   			 ::= rw_INT:t
	 			{:
	  				 RESULT=new intTypeNode(t.linenum, t.colnum);
         		:}	
    		 |   rw_BOOL:t
				 {:
	  				 RESULT=new boolTypeNode(t.linenum, t.colnum);
         		:}	
         	|
         		rw_CHAR:t
         		{:
         			RESULT=new charTypeNode(t.linenum, t.colnum);
         		:}
    		; 
    		
stmts		::= stmt:s1  stmts:s2
			 {: RESULT=
				new stmtsNode(s1,s2,s1.linenum,s1.colnum);
			 :}	
		| 
			 {: RESULT= new nullStmtsNode(); :}
		;
		
stmt		::= name:n ASG expr:e SEMI
			 {: RESULT=
				new asgNode(n,e,n.linenum,n.colnum);
			 :}
		
		|	rw_IF:i LPAREN expr:e RPAREN stmt:s1 rw_ELSE stmt:s2
			{:
				RESULT=new ifThenNode(e,s1,s2,i.linenum,i.colnum);
			:}

		| 	rw_IF:i LPAREN expr:e RPAREN  stmt:s
			{:	
				RESULT=new ifThenNode(e,s,i.linenum,i.colnum); 
			:}	
						
		|   LBRACE:l fielddecls:f stmts:s RBRACE optionalSemi
	 		{:
	  			 RESULT=new blockNode(f,s,l.linenum,l.colnum);
        	:}
       	|
       		rw_WHILE:w LPAREN expr:e RPAREN stmt:s
       		{:	RESULT=
       			new whileNode(exprNode.NULL, e, s, w.linenum, w.colnum);
       		:}
       	
       	|
       		ident:i COLON rw_WHILE LPAREN expr:e RPAREN stmt:s
       		{:	RESULT=
       			new whileNode(i,e,s,i.linenum,i.colnum);
       		:}
       	
       	|
       		name:n INCREMENT SEMI
       		{:	RESULT=
       			new incrementNode(n, n.linenum, n.colnum);
       		:}
       	
       	|
       		name:n DECREMENT SEMI
       		{:	RESULT=
       			new decrementNode(n, n.linenum, n.colnum);
       		:}
       	|	
       		rw_READ:r LPAREN readlist:rl RPAREN SEMI
       		{:	RESULT=
       			new readNode(rl.targetVar, rl.moreReads, r.linenum, r.colnum);
       		:}
       	
       	|
       		rw_PRINT:p LPAREN printlist:pl RPAREN SEMI
       		{:	RESULT=
       			new printNode(pl.outputValue, pl.morePrints, p.linenum, 
       				p.colnum);
       		:}
       	
       	|
       		ident:i LPAREN RPAREN SEMI
       		{:	RESULT=
       			new callNode(i, argsNode.NULL, i.linenum, i.colnum);
       		:}
       	
       	|
       		ident:i LPAREN args:a RPAREN SEMI
       		{:	RESULT=
       			new callNode(i, a, i.linenum, i.colnum);
       		:}
       		
       	|
       		rw_RETURN:r SEMI
       		{:	RESULT=
       			new returnNode(exprNode.NULL, r.linenum, r.colnum);
       		:}
       	
       	|
       		rw_RETURN:r expr:e SEMI
       		{:	RESULT=
       			new returnNode(e, r.linenum, r.colnum);
       		:}
       	
       	|
       		rw_BREAK:b ident:i SEMI
       		{:	RESULT=
       			new breakNode(i, b.linenum, b.colnum);
       		:}
       	
       	|
       		rw_CONTINUE:c ident:i SEMI
       		{:	RESULT=
       			new continueNode(i, c.linenum, c.colnum);
       		:}
        ;
        
args	::= expr:e COMMA args:a
			{:	RESULT=
				new argsNode(e, a, e.linenum, e.colnum);
			:}
		|
			expr:e
			{:	RESULT=
				new argsNode(e, argsNode.NULL, e.linenum, e.colnum);
			:}
		;

readlist	::= name:n COMMA readlist:rl
				{:	RESULT=
					new readNode(n, rl, n.linenum, n.colnum);
				:}
			|
				name:n
				{:	RESULT=
					new readNode(n, readNode.NULL, n.linenum, n.colnum);
				:}
			;
			
printlist	::= expr:e COMMA printlist:pl
				{:	RESULT=
					new printNode(e, pl, e.linenum, e.colnum);
				:}
			|
				expr:e
				{:	RESULT=
					new printNode(e, printNode.NULL, e.linenum, e.colnum);
				:}
			;

expr	::=	expr:e COR:op term:t
			{:	RESULT=
				new binaryOpNode(e,sym.COR,t,op.linenum,op.colnum);
			:}
		|
			expr:e CAND:op term:t
			{:	RESULT=
				new binaryOpNode(e,sym.CAND,t,op.linenum,op.colnum);
			:}
		|
			term:t
			{:	RESULT=t;	:}
		;

term	::=	factor:f1 LT:op factor:f2
			{:	RESULT=
				new binaryOpNode(f1,sym.LT,f2,op.linenum,op.colnum);
			:}

		|	factor:f1 GT:op factor:f2
			{:	RESULT=
				new binaryOpNode(f1,sym.GT,f2,op.linenum,op.colnum);
			:}
		
		|	factor:f1 LEQ:op factor:f2
			{:	RESULT=
				new binaryOpNode(f1,sym.LEQ,f2,op.linenum,op.colnum);
			:}
		
		|	factor:f1 GEQ:op factor:f2
			{:	RESULT=
				new binaryOpNode(f1,sym.GEQ,f2,op.linenum,op.colnum);
			:}
		
		|	factor:f1 EQ:op factor:f2
			{:	RESULT=
				new binaryOpNode(f1,sym.EQ,f2,op.linenum,op.colnum);
			:}
		
		|	factor:f1 NOTEQ:op factor:f2
			{:	RESULT=
				new binaryOpNode(f1,sym.NOTEQ,f2,op.linenum,op.colnum);
			:}
		
		|	factor:f
		{:	RESULT=f;	:}
		
		;

factor	::=	factor:f PLUS:op pri:p
			{:	RESULT=
				new binaryOpNode(f,sym.PLUS,p,op.linenum,op.colnum);
			:}
		
		|	factor:f MINUS:op pri:p
			{:	RESULT=
				new binaryOpNode(f,sym.MINUS,p,op.linenum,op.colnum);
			:}
		
		|	pri:p
		{:	RESULT=p;	:}
		
		;

pri		::=	pri:p TIMES:op unary:u
			{:	RESULT=
				new binaryOpNode(p,sym.TIMES,u,op.linenum,op.colnum);
			:}

		|	pri:p SLASH:op unary:u
			{:	RESULT=
				new binaryOpNode(p,sym.SLASH,u,op.linenum,op.colnum);
			:}
		
		|	unary:u
		{:	RESULT=u;	:}
		
		;

unary	::=	NOT:n unary:u
			{:	RESULT=
				new unaryOpNode(sym.NOT,u,n.linenum,n.colnum);
			:}

		|	LPAREN:l type:t RPAREN unary:u
			{:	RESULT=
				new castNode(t,u,l.linenum,l.colnum);
			:}
		
		|	unit:u
		{:	RESULT=u;	:}
		
		;		
			
unit    ::=
			name:n
			{:	RESULT=n;	:}
		|	ident:i LPAREN RPAREN
			{:	RESULT=
				new fctCallNode(i, argsNode.NULL, i.linenum, i.colnum);
			:}
		
		|	ident:i LPAREN args:a RPAREN
			{:	RESULT=
				new fctCallNode(i, a, i.linenum, i.colnum);
			:}
			
		| 	INTLIT:i
	  		{:	RESULT= 
	  			new intLitNode(i.intValue, i.linenum,i.colnum);
	  		:}
	  	
	  	|	CHARLIT:c
	  		{:	RESULT=
	  			new charLitNode(c.charValue, c.linenum, c.colnum);
	  		:}
	  	
	  	|	STRLIT:s
	  		{:	RESULT=
	  			new strLitNode(s.stringText, s.linenum, s.colnum);
	  		:}
	  	
	  	|	rw_TRUE:t
	  		{:	RESULT=
	  			new trueNode(t.linenum,t.colnum);
	  		:}
	  	
	  	|	rw_FALSE:f
	  		{:	RESULT=
	  			new falseNode(f.linenum,f.colnum);
	  		:}
	  	
		|	
            LPAREN expr:e RPAREN 
	   		{: RESULT = e; :}
		 
		;

name	::=	ident:i
			{:	RESULT=
				new nameNode(i, i.linenum, i.colnum);
			:}
		|
			ident:i LBRACKET expr:e RBRACKET
			{:	RESULT=
				new nameNode(i, e, i.linenum, i.colnum);
			:}
		;
		
ident	::= IDENTIFIER:i
			{: 	RESULT= 
				new identNode(i.identifierText,i.linenum,i.colnum); 
			:}
		;
		
optionalSemi	::= SEMI
   		 		|
   		 		;
